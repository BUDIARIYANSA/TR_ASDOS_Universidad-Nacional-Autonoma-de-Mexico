#include <Windows.h>
#include <GL\freeglut.h>
#include <iostream>
#include <imageloader.h>

using namespace std;

float w = 1000, h = 640;
float putarX = .0f, putarY = .0f, z = .0f;
float geserX = .0f, geserY = .0f;
int is_depth, n = 100, in_depth;

void initGL()
{
    glClearColor(0.6, 0.9, 0.9, 1.0);
    glLineWidth(2.0);
    glEnable(GL_DEPTH_TEST);
    is_depth = 1;
    in_depth = 1;
    glMatrixMode(GL_MODELVIEW);
}

void reshape(GLsizei width, GLsizei height) {
    if (height == 0) height = 1;
    GLfloat aspect = (GLfloat)width / (GLfloat)height;


    glViewport(0, 0, width, height);


    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();

    gluPerspective(50.0f, aspect, 5.f, 1500.0f);
    glTranslatef(.0f, -140.f, -750.f);
    glMatrixMode(GL_MODELVIEW);
}

void timer(int value)
{
    glutPostRedisplay();
    glutTimerFunc(1000 / 60, timer, 0);
}

void pagarGedung()
{
    // pagar 1
    glPushMatrix();
    glColor3f(.3f, .3f, .3f);
    glTranslatef(42.f, -28.0f, 170.f);
    glScalef(.2, 2.1, 5);
    glutSolidCube(20);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(20);
    glPopMatrix();

    // pagar 2
    glPushMatrix();
    glColor3f(.3f, .3f, .3f);
    glTranslatef(114.f, -28.0f, 220.f);
    glScalef(7.2, 2.1, .2);
    glutSolidCube(20);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(20);
    glPopMatrix();

    // pagar 3
    glPushMatrix();
    glColor3f(.3f, .3f, .3f);
    glTranslatef(187.f, -28.0f, 170.f);
    glScalef(.2, 2.1, 5);
    glutSolidCube(20);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(20);
    glPopMatrix();
}

void bbGedung()
{
    // bagian bawah gedung 1
    glPushMatrix();
    glTranslatef(-130.f, -3.0f, .0f);
    glColor3f(.9f, .9f, .9f);
    glScalef(1.8, 1, 2.9);
    glutSolidCube(80);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(80);
    glPopMatrix();

    // tepian bawah gedung 1
    glPushMatrix();
    glTranslatef(-134.f, -45.f, .0f);
    glColor3f(1.f, 1.f, 1.f);
    glScalef(1.88, .1, 3.1);
    glutSolidCube(80);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(80);
    glPopMatrix();

    // bagian bawah gedung 2
    glPushMatrix();
    glTranslatef(116.f, -3.0f, .0f);
    glColor3f(.9f, .9f, .9f);
    glScalef(1.8, 1, 2.9);
    glutSolidCube(80);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(80);
    glPopMatrix();

    // tepian bawah gedung 2
    glPushMatrix();
    glTranslatef(124.5f, -45.f, 8.0f);
    glColor3f(1.f, 1.f, 1.f);
    glScalef(2.1, .1, 3.3);
    glutSolidCube(80);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(80);
    glPopMatrix();


}

void kursi()
{
    glPushMatrix();
    glColor3f(1.f, .0f, .0f);
    glTranslatef(.0f, .0f, 300.f);
    glScalef(1, .1, 1);
    glutSolidCube(40);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(40);
    glPopMatrix();

    glPushMatrix();
    glColor3f(1.f, .0f, .0f);
    glTranslatef(-17.f, -11.0f, 317.f);
    glScalef(.1, .6, .1);
    glutSolidCube(40);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(40);
    glPopMatrix();

    glPushMatrix();
    glColor3f(1.f, .0f, .0f);
    glTranslatef(-17.f, -11.0f, 283.f);
    glScalef(.1, .6, .1);
    glutSolidCube(40);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(40);
    glPopMatrix();

    glPushMatrix();
    glColor3f(1.f, .0f, .0f);
    glTranslatef(17.f, -11.0f, 317.f);
    glScalef(.1, .6, .1);
    glutSolidCube(40);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(40);
    glPopMatrix();

    glPushMatrix();
    glColor3f(1.f, .0f, .0f);
    glTranslatef(17.f, -11.0f, 283.f);
    glScalef(.1, .6, .1);
    glutSolidCube(40);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(40);
    glPopMatrix();

    glPushMatrix();
    glColor3f(1.f, .0f, .0f);
    glTranslatef(17.0f, 24.0f, 300.f);
    glScalef(.1, 1.2, 1);
    glutSolidCube(40);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(40);
    glPopMatrix();
}

void meja()
{
    glPushMatrix();
    glTranslatef(.0f, .0f, 100.f);
    glColor3f(1.f, .0f, .0f);
    glScalef(1.3, .1, 1);
    glutSolidCube(50);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(50);
    glPopMatrix();

    glPushMatrix();
    glTranslatef(.0f, -14.0f, 100.f);
    glColor3f(1.f, 1.f, 1.f);
    glScalef(.1, .6, .1);
    glutSolidCube(50);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(50);
    glPopMatrix();

    glPushMatrix();
    glTranslatef(.0f, -30.0f, 100.f);
    glColor3f(.0f, .0f, .0f);
    glScalef(1.3, .1, 1);
    glutSolidCube(10);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(10);
    glPopMatrix();
    
}

void setKursiMeja()
{
    glPushMatrix();
    glTranslatef(-80.0f, -10.0f, 250.f);
    glScalef(.5, .5, .5);
    meja();
    glPopMatrix();

    //kursi 1
    glPushMatrix();
    glTranslatef(-50.0f, -20.0f, 210.0f);
    glScalef(.3, .3, .3);
    kursi();
    glPopMatrix();

    //kursi 2
    glPushMatrix();
    glTranslatef(-110.0f, -20.0f, 390.0f);
    glRotatef(180.f, .0f, 1.f, .0f);
    glScalef(.3, .3, .3);
    kursi();
    glPopMatrix();

}

void jamDinding()
{
    glPushMatrix();
    glTranslatef(.0f, -30.0f, 300.f);
    glColor3f(.0f, .0f, 1.0f);
    glutSolidCylinder(30, 2, 100, 10);
    glPopMatrix();

    glPushMatrix();
    glTranslatef(.0f, -30.0f, 303.f);
    glColor3f(1.f, 1.f, 1.f);
    glBegin(GL_POLYGON);

    for (int i = 0; i <= n; i++)
    {
        glVertex2f(27 * cos(2 * 3.14159265 * i / n), 27 * sin(2 * 3.14159265 * i / n));
    }
    glEnd();
    glPopMatrix();

    // jarum panjang
    glPushMatrix();
    glTranslatef(.0f, -30.0f, 107.f);
    glColor3f(1.f, .0f, .0f);
    glBegin(GL_POLYGON);
    glVertex3f(-1.f, .0f, 200.f);
    glVertex3f(-3.f, 13.f, 200.f);
    glVertex3f(.0f, 25.f, 200.f);
    glVertex3f(3.f, 13.f, 200.f);
    glVertex3f(1.f, .0f, 200.f);
    glEnd();
    glPopMatrix();

    // jarum pendek
    glPushMatrix();
    glTranslatef(.0f, -30.0f, 107.f);
    glRotatef(90, .0f, .0f, 1.f);
    glColor3f(1.f, .0f, .0f);
    glBegin(GL_POLYGON);
    glVertex3f(-1.f, .0f, 200.f);
    glVertex3f(-3.f, 6.f, 200.f);
    glVertex3f(.0f, 18.f, 200.f);
    glVertex3f(3.f, 6.f, 200.f);
    glVertex3f(1.f, .0f, 200.f);
    glEnd();
    glPopMatrix();

}


int main(int argc, char* argv[]) {

    // Initialize GLUT
    glutInit(&argc, argv);
    // Set up some memory buffers for our display
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA | GLUT_DEPTH);
    // Set the window size
    glutInitWindowSize(w, h);
    glutInitWindowPosition(100, 10);
    // Create the window with the title "Hello,GL"
    glutCreateWindow("Universidad Nacional Autonoma de Mexico");
    initRendering();
    glutDisplayFunc(render);
    glutReshapeFunc(reshape);

    glutTimerFunc(0, timer, 0);
    glutSpecialFunc(keyboard);
    glutKeyboardFunc(specKey);

    glutMouseFunc(mouse);
    glutMotionFunc(mouseMotion);
    initGL();
    glutMainLoop();
    return 0;
}
