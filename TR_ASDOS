#include <Windows.h>
#include <GL\freeglut.h>
#include <iostream>
#include <imageloader.h>

using namespace std;

float w = 1000, h = 640;
float putarX = .0f, putarY = .0f, z = .0f;
float geserX = .0f, geserY = .0f;
int is_depth, n = 100, in_depth;

float xrot = 0.0f;
float yrot = 0.0f;
float xdiff = 0.0f;
float ydiff = 0.0f;
bool mouseDown = false;

GLuint loadTexture(Image* image) {
    GLuint textureId;
    glGenTextures(1, &textureId);
    glBindTexture(GL_TEXTURE_2D, textureId);
    glTexImage2D(GL_TEXTURE_2D,
        0,
        GL_RGB,
        image->width, image->height,
        0,
        GL_RGB,
        GL_UNSIGNED_BYTE,

        image->pixels);
    return textureId;
}

GLuint _textureId;

void initRendering() {


    Image* image = loadBMP("texture.bmp");
    _textureId = loadTexture(image);
    delete image;
}

void initGL()
{
    glClearColor(0.6, 0.9, 0.9, 1.0);
    glLineWidth(2.0);
    glEnable(GL_DEPTH_TEST);
    is_depth = 1;
    in_depth = 1;
    glMatrixMode(GL_MODELVIEW);
}

void reshape(GLsizei width, GLsizei height) {
    if (height == 0) height = 1;
    GLfloat aspect = (GLfloat)width / (GLfloat)height;


    glViewport(0, 0, width, height);


    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();

    gluPerspective(50.0f, aspect, 5.f, 1500.0f);
    glTranslatef(.0f, -140.f, -750.f);
    glMatrixMode(GL_MODELVIEW);
}

void keyboard(int key, int x, int y)
{
    switch (key)
    {
    case GLUT_KEY_LEFT: geserX += 4.4; break;
    case GLUT_KEY_RIGHT: geserX += -4.4; break;
    case GLUT_KEY_UP: geserY += 4.4; break;
    case GLUT_KEY_DOWN: geserY += -4.4; break;
    }
}

void specKey(unsigned char key, int x, int y)
{
    switch (key)
    {
    case 'z': 
    case 'Z':
        z += 9.4; break;
    case 'x':
    case 'X':
        z += -9.4; break;
    case 'a':
    case 'A':
        putarX += 4.4; break;
    case 'd':
    case 'D':
        putarX += -4.4; break;
    case 'w':
    case 'W':
        putarY += 4.4; break;
    case 's':
    case 'S':
        putarY += -4.4; break;
    default:
        break;
    }
}

void timer(int value)
{
    glutPostRedisplay();
    glutTimerFunc(1000 / 60, timer, 0);
}

void mouse(int button, int state, int x, int y)

{
    if (button == GLUT_LEFT_BUTTON && state
        == GLUT_DOWN)
    {
        mouseDown = true;
        xdiff = x - yrot;
        ydiff = -y - xrot;
    }
    else
        mouseDown = false;
}

void mouseMotion(int x, int y)
{
    if (mouseDown)
    {
        xrot = x - xdiff;
        yrot = y + ydiff;

        glutPostRedisplay();
    }
}

void pagarGedung()
{
    // pagar 1
    glPushMatrix();
    glColor3f(.3f, .3f, .3f);
    glTranslatef(42.f, -28.0f, 170.f);
    glScalef(.2, 2.1, 5);
    glutSolidCube(20);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(20);
    glPopMatrix();

    // pagar 2
    glPushMatrix();
    glColor3f(.3f, .3f, .3f);
    glTranslatef(114.f, -28.0f, 220.f);
    glScalef(7.2, 2.1, .2);
    glutSolidCube(20);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(20);
    glPopMatrix();

    // pagar 3
    glPushMatrix();
    glColor3f(.3f, .3f, .3f);
    glTranslatef(187.f, -28.0f, 170.f);
    glScalef(.2, 2.1, 5);
    glutSolidCube(20);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(20);
    glPopMatrix();
}

void bbGedung()
{
    // bagian bawah gedung 1
    glPushMatrix();
    glTranslatef(-130.f, -3.0f, .0f);
    glColor3f(.9f, .9f, .9f);
    glScalef(1.8, 1, 2.9);
    glutSolidCube(80);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(80);
    glPopMatrix();

    // tepian bawah gedung 1
    glPushMatrix();
    glTranslatef(-134.f, -45.f, .0f);
    glColor3f(1.f, 1.f, 1.f);
    glScalef(1.88, .1, 3.1);
    glutSolidCube(80);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(80);
    glPopMatrix();

    // bagian bawah gedung 2
    glPushMatrix();
    glTranslatef(116.f, -3.0f, .0f);
    glColor3f(.9f, .9f, .9f);
    glScalef(1.8, 1, 2.9);
    glutSolidCube(80);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(80);
    glPopMatrix();

    // tepian bawah gedung 2
    glPushMatrix();
    glTranslatef(124.5f, -45.f, 8.0f);
    glColor3f(1.f, 1.f, 1.f);
    glScalef(2.1, .1, 3.3);
    glutSolidCube(80);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(80);
    glPopMatrix();


}

void jendela()
{
    glColor3f(1.0f, 1.0f, 1.0f);
    glBegin(GL_QUADS);
    glTexCoord2f(0.580f, 0.501f);
    glVertex3f(-0.5f, 0.0f, 200.0f);
    glTexCoord2f(0.580f, 1.0f);
    glVertex3f(-0.5f, 58.0f, 200.0f);
    glTexCoord2f(1.0f, 1.0f);
    glVertex3f(46.0f, 58.0f, 200.0f);
    glTexCoord2f(1.0f, 0.501f);
    glVertex3f(46.0f, 0.0f, 200.0f);
    glEnd();
    glPushMatrix();
    glTranslatef(46.0f, 29.0f, 200.f);
    glColor3f(1.f, .0f, .0f);
    glScalef(1.5f, 29.0f, 1.0f);
    glutSolidCube(2);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(2);
    glPopMatrix();

}

void jendela2()
{
    glPushMatrix();
    glTranslatef(-175.0f, 42.0f, 0.0f);
    glColor3f(1.0f, 1.0f, 1.0f);
    glBegin(GL_QUADS);
    glTexCoord2f(0.0f, 0.724f);
    glVertex3f(0.0f, 0.0f, 25.0f);
    glTexCoord2f(0.0f, 1.0f);
    glVertex3f(0.0f, 28.0f, 25.0f);
    glTexCoord2f(0.374f, 1.0f);
    glVertex3f(54.0f, 28.0f, 25.0f);
    glTexCoord2f(0.374f, 0.724f);
    glVertex3f(54.0f, 0.0f, 25.0f);
    glEnd();
    glPopMatrix();
}

void layarlcd()
{
    glPushMatrix();
    glColor3f(.0f, .0f, .0f);
    glTranslatef(-120.f, -28.0f, 220.f);
    glScalef(5, 2.1, .2);
    glutSolidCube(20);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(20);
    glPopMatrix();
}

void kursi()
{
    glPushMatrix();
    glColor3f(1.f, .0f, .0f);
    glTranslatef(.0f, .0f, 300.f);
    glScalef(1, .1, 1);
    glutSolidCube(40);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(40);
    glPopMatrix();

    glPushMatrix();
    glColor3f(1.f, .0f, .0f);
    glTranslatef(-17.f, -11.0f, 317.f);
    glScalef(.1, .6, .1);
    glutSolidCube(40);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(40);
    glPopMatrix();

    glPushMatrix();
    glColor3f(1.f, .0f, .0f);
    glTranslatef(-17.f, -11.0f, 283.f);
    glScalef(.1, .6, .1);
    glutSolidCube(40);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(40);
    glPopMatrix();

    glPushMatrix();
    glColor3f(1.f, .0f, .0f);
    glTranslatef(17.f, -11.0f, 317.f);
    glScalef(.1, .6, .1);
    glutSolidCube(40);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(40);
    glPopMatrix();

    glPushMatrix();
    glColor3f(1.f, .0f, .0f);
    glTranslatef(17.f, -11.0f, 283.f);
    glScalef(.1, .6, .1);
    glutSolidCube(40);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(40);
    glPopMatrix();

    glPushMatrix();
    glColor3f(1.f, .0f, .0f);
    glTranslatef(17.0f, 24.0f, 300.f);
    glScalef(.1, 1.2, 1);
    glutSolidCube(40);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(40);
    glPopMatrix();
}

void meja()
{
    glPushMatrix();
    glTranslatef(.0f, .0f, 100.f);
    glColor3f(1.f, .0f, .0f);
    glScalef(1.3, .1, 1);
    glutSolidCube(50);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(50);
    glPopMatrix();

    glPushMatrix();
    glTranslatef(.0f, -14.0f, 100.f);
    glColor3f(1.f, 1.f, 1.f);
    glScalef(.1, .6, .1);
    glutSolidCube(50);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(50);
    glPopMatrix();

    glPushMatrix();
    glTranslatef(.0f, -30.0f, 100.f);
    glColor3f(.0f, .0f, .0f);
    glScalef(1.3, .1, 1);
    glutSolidCube(10);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(10);
    glPopMatrix();
    
}

void setKursiMeja()
{
    glPushMatrix();
    glTranslatef(-80.0f, -10.0f, 250.f);
    glScalef(.5, .5, .5);
    meja();
    glPopMatrix();

    //kursi 1
    glPushMatrix();
    glTranslatef(-50.0f, -20.0f, 210.0f);
    glScalef(.3, .3, .3);
    kursi();
    glPopMatrix();

    //kursi 2
    glPushMatrix();
    glTranslatef(-110.0f, -20.0f, 390.0f);
    glRotatef(180.f, .0f, 1.f, .0f);
    glScalef(.3, .3, .3);
    kursi();
    glPopMatrix();

}

void jamDinding()
{
    glPushMatrix();
    glTranslatef(.0f, -30.0f, 300.f);
    glColor3f(.0f, .0f, 1.0f);
    glutSolidCylinder(30, 2, 100, 10);
    glPopMatrix();

    glPushMatrix();
    glTranslatef(.0f, -30.0f, 303.f);
    glColor3f(1.f, 1.f, 1.f);
    glBegin(GL_POLYGON);

    for (int i = 0; i <= n; i++)
    {
        glVertex2f(27 * cos(2 * 3.14159265 * i / n), 27 * sin(2 * 3.14159265 * i / n));
    }
    glEnd();
    glPopMatrix();

    // jarum panjang
    
    glPushMatrix();
    glTranslatef(.0f, -30.0f, 107.f);
    glColor3f(1.f, .0f, .0f);
    glBegin(GL_POLYGON);
    glVertex3f(-1.f, .0f, 200.f);
    glVertex3f(-3.f, 13.f, 200.f);
    glVertex3f(.0f, 25.f, 200.f);
    glVertex3f(3.f, 13.f, 200.f);
    glVertex3f(1.f, .0f, 200.f);
    glEnd();
    glPopMatrix();

    // jarum pendek
    
    glPushMatrix();
    glTranslatef(.0f, -30.0f, 107.f);
    glRotatef(90, .0f, .0f, 1.f);
    glColor3f(1.f, .0f, .0f);
    glBegin(GL_POLYGON);
    glVertex3f(-1.f, .0f, 200.f);
    glVertex3f(-3.f, 6.f, 200.f);
    glVertex3f(.0f, 18.f, 200.f);
    glVertex3f(3.f, 6.f, 200.f);
    glVertex3f(1.f, .0f, 200.f);
    glEnd();
    glPopMatrix();

}

void lemari()
{
    //lemari
    glPushMatrix();
    glTranslatef(-6.0f, -20.0f, 250.f);
    //badan lemari
    glColor3f(0.5f, 0.1f, 0.1f);
    glScalef(4.0, 4.9, 2.0);
    glutSolidCube(10);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(10);
    glPopMatrix();
    //pintu lemari
    glPushMatrix();
    glTranslatef(-15.0f, -20.0f, 253.f);
    glColor3f(0.6f, 0.3f, 0.2f);
    glScalef(1.7, 4.5, 2.0);
    glutSolidCube(10);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(10);
    glPopMatrix();

    glPushMatrix();
    glTranslatef(3.0f, -20.0f, 253.f);
    glColor3f(0.6f, 0.3f, 0.2f);
    glScalef(1.7, 4.5, 2.0);
    glutSolidCube(10);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(10);
    glPopMatrix();
    //gagang pintu
    glPushMatrix();
    glColor3f(0.5f, 0.1f, 0.1f);
    glTranslatef(-10.0f, -20.0f, 263.f);
    glutSolidCylinder(1, 1, 20, 5);
    glColor3f(0.0f, 0.0f, 0.0f);
    glutWireCylinder(1, 1, 20, 5);
    glColor3f(0.5f, 0.1f, 0.1f);
    glTranslatef(8.0f, 0.0f, 0.f);
    glutSolidCylinder(1, 1, 20, 5);
    glColor3f(0.0f, 0.0f, 0.0f);
    glutWireCylinder(1, 1, 20, 5);
    glPopMatrix();
}

void tabungSampah()
{
    glPushMatrix();
    glTranslatef(180.0f, -30.0f, 95.f);
    glColor3f(1.0f, 1.0f, 1.0f);
    glRotatef(90, 1, 0, 0);
    glutSolidCylinder(5, 10, 10, 10);
    glColor3f(0.0f, 0.0f, 0.0f);
    glutWireCylinder(5, 10, 10, 5);
    glPopMatrix();
}

void render()
{
    if (is_depth) {
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); // Clear color and depth buffers
    }
    else {
        glClear(GL_COLOR_BUFFER_BIT); // Clear color and depth buffers
    }
    glLoadIdentity();

    glPushMatrix();
    glRotatef(xrot, 0.0f, 1.0f, 0.0f);
    glRotatef(yrot, 1.0f, .0f, 0.0f);

    glTranslatef(.0f, .0f, z);
    glTranslatef(geserX, geserY, .0f);
    glRotatef(putarX, .0f, 1.f, 0.f);
    glRotatef(putarY, 1.f, .0f, 0.f);

    // tanah
    glPushMatrix();
    glColor3f(.2f, 1.f, .2f);
    glTranslatef(.0f, -53.f, .0f);
    glScalef(8, .05, 8);
    glutSolidCube(80);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(80);
    glPopMatrix();

    // lantai gedung
    glPushMatrix();
    glColor3f(1.f, 1.f, 1.f);
    glTranslatef(.0f, -43.f, .0f);
    glScalef(4.8, .05, 3);
    glutSolidCube(80);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(80);
    glPopMatrix();

    glPushMatrix();
    glColor3f(1.f, 1.f, 1.f);
    glTranslatef(-8.7f, -47.f, 2.3f);
    glScalef(1.2, .05, 3.2);
    glutSolidCube(80);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(80);
    glPopMatrix();

    // bagian bawah gedung
    bbGedung();

    // warna atap
    glPushMatrix();
    glScalef(5, 1, 3);
    glColor3f(.7f, .1f, .1f);
    glBegin(GL_QUADS);
    glVertex3f(-40.f, 42.0f, -42.f);
    glVertex3f(-40.f, 42.0f, 46.f);
    glVertex3f(40.f, 42.0f, 46.f);
    glVertex3f(40.f, 42.0f, -42.f);
    glEnd();
    glPopMatrix();

    // tepian atap
    glPushMatrix();
    glTranslatef(.0f, 29.f, 6.0f);
    glColor3f(1.f, 1.f, 1.f);
    glScalef(5.1, 0.3, 3.4);
    glutSolidCube(80);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(80);
    glPopMatrix();

    // badan 1
    glPushMatrix();
    glTranslatef(-40.0f, 170.f, -30.f);
    glColor3f(.5f, .1f, .1f);
    glScalef(7, 5, 3);
    glutSolidCube(40);
    glPopMatrix();

    //tepian pintu masuk

    //tiang kanan
    for (int i = 0; i < 4; i++)
    {
        int x = 40 * i;
        glPushMatrix();
        glTranslatef(175.0f - x, 20.0f, 132.0f);
        glRotatef(90.0f, 1.0f, .0f, .0f);
        glColor3f(0.6f, 0.6f, 0.6f);
        glutSolidCylinder(4, 60, 10, 10);
        glColor3f(0.0f, 0.0f, 0.0f);
        glPopMatrix();
    }

    // atap badan 1

    glPushMatrix();
    glTranslatef(-2.3f, 171.f, -30.f);
    glScalef(5, 1, 5.6);
    glBegin(GL_QUADS);
    glColor3f(.7f, .1f, .1f);
    glVertex3f(-35.f, 100.0f, -10.f);
    glVertex3f(-35.f, 100.0f, 10.f);
    glVertex3f(20.f, 100.0f, 10.f);
    glVertex3f(20.f, 100.0f, -10.f);
    glEnd();
    glPopMatrix();

    // badan 2
    glPushMatrix();
    glTranslatef(-40.0f, 288.f, 6.f);
    glColor3f(0.7f, 0.1f, 0.1f);
    glScalef(2.2, .8, 1);
    glutSolidCube(40);
    glPopMatrix();

    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, _textureId);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

    //gambar
    glPushMatrix();
    glTranslatef(-40.0f, 170.f, -30.f);

    //depan
    glBegin(GL_QUADS);
    glColor3f(1.0f, 1.0f, 1.0f);
    glTexCoord2f(0.0f, 0.0f);
    glVertex3f(-140.f, -100.0f, 61.f);
    glTexCoord2f(0.0f, 0.283f);
    glVertex3f(-140.f, 100.0f, 61.f);
    glTexCoord2f(0.444f, 0.283f);
    glVertex3f(140.f, 100.0f, 61.f);
    glTexCoord2f(0.444f, 0.0f);
    glVertex3f(140.f, -100.0f, 61.f);
    glEnd();

    //belakang
    glBegin(GL_QUADS);
    glColor3f(1.0f, 1.0f, 1.0f);
    glTexCoord2f(0.444f, 0.0f);
    glVertex3f(-140.f, -100.0f, -61.f);
    glTexCoord2f(0.444f, 0.283f);
    glVertex3f(-140.f, 100.0f, -61.f);
    glTexCoord2f(0.858f, 0.283f);
    glVertex3f(140.f, 100.0f, -61.f);
    glTexCoord2f(0.858f, 0.0f);
    glVertex3f(140.f, -100.0f, -61.f);
    glEnd();

    //kiri
    glBegin(GL_QUADS);
    glColor3f(1.0f, 1.0f, 1.0f);
    glTexCoord2f(0.0f, 0.283f);
    glVertex3f(-141.f, -100.0f, -61.f);
    glTexCoord2f(0.0f, 0.724f);
    glVertex3f(-141.f, 100.0f, -61.f);
    glTexCoord2f(0.259f, 0.724f);
    glVertex3f(-141.f, 100.0f, 61.f);
    glTexCoord2f(0.259f, 0.283f);
    glVertex3f(-141.f, -100.0f, 61.f);
    glEnd();

    //kanan
    glBegin(GL_QUADS);
    glColor3f(1.0f, 1.0f, 1.0f);
    glTexCoord2f(0.259f, 0.283f);
    glVertex3f(141.f, -100.0f, 61.f);
    glTexCoord2f(0.259f, 0.724f);
    glVertex3f(141.f, 100.0f, 61.f);
    glTexCoord2f(0.525f, 0.724f);
    glVertex3f(141.f, 100.0f, -61.f);
    glTexCoord2f(0.525f, 0.283f);
    glVertex3f(141.f, -100.0f, -61.f);
    glEnd();
    glPopMatrix();

    //depan
    glPushMatrix();
    glTranslatef(-40.0f, 288.f, 6.f);
    glBegin(GL_QUADS);
    glColor3f(1.0f, 1.0f, 1.0f);
    glTexCoord2f(0.888f, 0.283f);
    glVertex3f(-44.0f, -16.0f, 20.5f);
    glTexCoord2f(1.0f, 0.283f);
    glVertex3f(-44.0f, 16.0f, 20.5f);
    glTexCoord2f(1.0f, 0.0f);
    glVertex3f(44.0f, 16.0f, 20.5f);
    glTexCoord2f(0.888f, 0.0f);
    glVertex3f(44.0f, -16.0f, 20.5f);
    glEnd();


    //kiri
    glBegin(GL_QUADS);
    glColor3f(1.0f, 1.0f, 1.0f);
    glTexCoord2f(0.888f, 0.283f);
    glVertex3f(-44.5f, -16.0f, -20.0f);
    glTexCoord2f(1.0f, 0.283f);
    glVertex3f(-44.5f, 16.0f, -20.0f);
    glTexCoord2f(1.0f, 0.157f);
    glVertex3f(-44.5f, 16.0f, 20.0f);
    glTexCoord2f(0.888f, 0.157f);
    glVertex3f(-44.5f, -16.0f, 20.0f);
    glEnd();

    //belakang
    glBegin(GL_QUADS);
    glColor3f(1.0f, 1.0f, 1.0f);
    glTexCoord2f(0.536f, 0.216f);
    glVertex3f(44.0f, -16.0f, -20.5f);
    glTexCoord2f(0.536f, 0.283f);
    glVertex3f(44.0f, 16.0f, -20.5f);
    glTexCoord2f(0.781f, 0.283f);
    glVertex3f(-44.0f, 16.0f, -20.5f);
    glTexCoord2f(0.781f, 0.216f);
    glVertex3f(-44.0f, -16.0f, -20.5f);
    glEnd();

    //kanan
    glBegin(GL_QUADS);
    glColor3f(1.0f, 1.0f, 1.0f);
    glTexCoord2f(0.888f, 0.126f);
    glVertex3f(44.5f, -16.0f, 20.0f);
    glTexCoord2f(1.0f, 0.126f);
    glVertex3f(44.5f, 16.0f, 20.0f);
    glTexCoord2f(1.0f, 0.0f);
    glVertex3f(44.5f, 16.0f, -20.0f);
    glTexCoord2f(0.888f, 0.0f);
    glVertex3f(44.5f, -16.0f, -20.0f);
    glEnd();
    glPopMatrix();


    //jendela depan
    glPushMatrix();
    glTranslatef(-6.0f, -4.0f, 122.f);
    glColor3f(1.0f, 1.0f, 1.0f);
    glBegin(GL_QUADS);
    glTexCoord2f(0.528f, 0.283f);
    glVertex3f(-51.0f, 0.0f, 0.5f);
    glTexCoord2f(0.528f, 0.501f);
    glVertex3f(-51.0f, 21.0f, 0.5f);
    glTexCoord2f(1.0f, 0.501f);
    glVertex3f(1.0f, 21.0f, 0.5f);
    glTexCoord2f(1.0f, 0.283f);
    glVertex3f(1.0f, 0.0f, 0.5f);
    glEnd();
    glBegin(GL_QUADS);
    glTexCoord2f(0.528f, 0.283f);
    glVertex3f(0.0f, 0.0f, 0.5f);
    glTexCoord2f(0.528f, 0.501f);
    glVertex3f(0.0f, 21.0f, 0.5f);
    glTexCoord2f(1.0f, 0.501f);
    glVertex3f(52.0f, 21.0f, 0.5f);
    glTexCoord2f(1.0f, 0.283f);
    glVertex3f(52.0f, 0.0f, 0.5f);
    glEnd();
    glPopMatrix();

    //jendela depan kiri
    for (int i = 0; i < 3; i++)
    {
        int x = 48 * i;
        glPushMatrix();
        glTranslatef(-105.6f - x, -41.0f, -79.5f);
        jendela();
        glPopMatrix();
    }

    //jendela depan kanan
    for (int i = 0; i < 3; i++)
    {
        int x = 48 * i;
        glPushMatrix();
        glTranslatef(142.0f - x, -41.0f, -82.0f);
        jendela();
        glPopMatrix();
    }

    //jendela samping kiri
    glPushMatrix();
    glRotatef(-90.0f, .0f, .1f, .0f);
    for (int i = 0; i < 5; i++)
    {
        glPushMatrix();
        int x = 48 * i;
        glTranslatef(75.0f - x, -41.0f, 2.5f);
        jendela();
        glPopMatrix();
    }
    glPopMatrix();

    //jendela belakang
    glPushMatrix();
    glRotatef(-180.0f, .0f, .1f, .0f);
    for (int i = 0; i < 8; i++)
    {
        int x = 49 * i;
        glPushMatrix();
        glTranslatef(155.6f - x, -41.0f, -80.5f);
        jendela();
        glPopMatrix();
    }
    glPopMatrix();

    //jendela samping kanan
    glPushMatrix();
    glRotatef(-270.0f, .0f, .1f, .0f);
    for (int i = 0; i < 5; i++)
    {
        glPushMatrix();
        int x = 48 * i;
        glTranslatef(75.0f - x, -41.0f, -10.0f);
        jendela();
        glPopMatrix();
    }
    glPopMatrix();

    //jendela tengah
    //depan
    for (int i = 0; i < 5; i++)
    {
        int x = 54 * i;
        glPushMatrix();
        glTranslatef(0.f + x, .0f, .0f);
        jendela2();
        glPopMatrix();
    }
    //belakang
    for (int i = 0; i < 5; i++)
    {
        int x = 54 * i;
        glPushMatrix();
        glTranslatef(0.f + x, .0f, -109.1f);
        jendela2();
        glPopMatrix();
    }

    glPushMatrix();
    glRotatef(90.f, .0f, 1.0f, .0f);
    //kiri
    for (int i = 0; i < 2; i++)
    {
        int x = 54 * i;
        glPushMatrix();
        glTranslatef(151.0f + x, .0f, -200.1f);
        jendela2();
        glPopMatrix();
    }

    //kanan
    for (int i = 0; i < 2; i++)
    {
        int x = 54 * i;
        glPushMatrix();
        glTranslatef(151.0f + x, .0f, 70.1f);
        jendela2();
        glPopMatrix();
    }
    glPopMatrix();


    glDisable(GL_TEXTURE_2D);
    
    // badan kecil bawah
    glPushMatrix();
    glColor3f(0.f, 1.f, 1.f);
    glTranslatef(-40.0f, 50.f, -30.f);
    glScalef(6.75, 1, 2.7);
    glutSolidCube(40);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(40);
    glPopMatrix();

    // pagar
    pagarGedung();

    // tabung sampah
    tabungSampah();

    // bagian depan 
    glPushMatrix();
    glColor3f(1.0f, 1.f, 1.f);
    glTranslatef(-6.0f, 11.0f, 108.f);
    glScalef(5.1, 1.5, 1);
    glutSolidCube(20);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(20);
    glPopMatrix();

    //tiang depan
    for (int i = 0; i < 3; i++)
    {
        int x = 40 * i;
        glPushMatrix();
        glTranslatef(32.0f - x, -9.0f, 110.0f);
        glRotatef(90.0f, 1.0f, .0f, .0f);
        glColor3f(0.6f, 0.6f, 0.6f);
        glutSolidCylinder(4, 32, 10, 10);
        glColor3f(0.0f, 0.0f, 0.0f);
        glPopMatrix();
    }

    //atap kecil
    glPushMatrix();
    glTranslatef(-6.0f, -7.0f, 118.f);
    glColor3f(1.0f, 1.0f, 1.0f);
    glScalef(10.2, .5, 2.0);
    glutSolidCube(10);
    glColor3f(.0f, .0f, .0f);
    glutWireCube(10);
    glPopMatrix();

    //tutup belakang
    glPushMatrix();
    glTranslatef(-60.0f, -40.0f, .0f);
    glColor3f(0.9f, 0.9f, 0.9f);
    glBegin(GL_QUADS);
    glVertex3f(.0f, -1.0f, -115.0f);
    glVertex3f(.0f, 70.0f, -115.0f);
    glVertex3f(100.0f, 70.0f, -115.0f);
    glVertex3f(100.0f, -1.0f, -115.0f);
    glEnd();
    glPopMatrix();

    // PapanTulis
    glPushMatrix();
    glTranslatef(-70.0f, 13.0f, -270.f);
    glScalef(.7, .7, .7);
    layarlcd();
    glPopMatrix();

    // set meja kursi 1
    for (int i = 1; i <= 2; i++) {
        int x = 50 * i;
        glPushMatrix();
        glTranslatef(-70.f, -15.0f, -430.f + x);
        setKursiMeja();
        glPopMatrix();
    }

    // set meja kursi 2
    for (int i = 1; i <= 2; i++) {
        int x = 50 * i;
        glPushMatrix();
        glTranslatef(-20.f, -15.0f, -310.f + x);
        setKursiMeja();
        glPopMatrix();
    }

    // set meja kursi 3
    for (int i = 1; i <= 4; i++) {
        int x = 50 * i;
        glPushMatrix();
        glTranslatef(170.f, -15.0f, -430.f + x);
        setKursiMeja();
        glPopMatrix();
    }

    // Jam Dinding 1
    glPushMatrix();
    glTranslatef(-85.0f, 5.0f, -175.0f);
    glScalef(.2, .2, .2);
    jamDinding();
    glPopMatrix();

    // Jam Dinding 2
    glPushMatrix();
    glTranslatef(85.0f, 5.0f, -175.0f);
    glScalef(.2, .2, .2);
    jamDinding();
    glPopMatrix();

    //lemari
    glPushMatrix();
    glTranslatef(170.f, 4.f, -355.f);
    lemari();
    glPopMatrix();

    glPopMatrix();
    glutSwapBuffers();
}


int main(int argc, char* argv[]) {

    // Initialize GLUT
    glutInit(&argc, argv);
    // Set up some memory buffers for our display
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA | GLUT_DEPTH);
    // Set the window size
    glutInitWindowSize(w, h);
    glutInitWindowPosition(100, 10);
    // Create the window with the title "Hello,GL"
    glutCreateWindow("Universidad Nacional Autonoma de Mexico");
    initRendering();
    glutDisplayFunc(render);
    glutReshapeFunc(reshape);

    glutTimerFunc(0, timer, 0);
    glutSpecialFunc(keyboard);
    glutKeyboardFunc(specKey);

    glutMouseFunc(mouse);
    glutMotionFunc(mouseMotion);
    initGL();
    glutMainLoop();
    return 0;
}
